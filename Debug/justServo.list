
justServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032ac  080032ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080032c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080032c0  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca30  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b00  00000000  00000000  0002caaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000958  00000000  00000000  0002f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b19  00000000  00000000  0002fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e36f  00000000  00000000  00051601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0951  00000000  00000000  0005f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000323c  00000000  00000000  001302c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00133500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003274 	.word	0x08003274

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003274 	.word	0x08003274

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b09c      	sub	sp, #112	; 0x70
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 facf 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f837 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f943 	bl	8000798 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000512:	f000 f8a1 	bl	8000658 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f915 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800051a:	2100      	movs	r1, #0
 800051c:	4816      	ldr	r0, [pc, #88]	; (8000578 <main+0x78>)
 800051e:	f001 fc8f 	bl	8001e40 <HAL_TIM_PWM_Start>
  uint8_t MSG[100] = {'\0'};
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	2260      	movs	r2, #96	; 0x60
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fe74 	bl	800321c <memset>
	 // 1ms -> 0deg(5%)
	 // 2ms -> 180deg(10%)
	 // 1000(5%)->50
	 // 1000(10%)->100
	 //35 75 112
		for(int i=5 ;i<150 ;i=i+2)
 8000534:	2305      	movs	r3, #5
 8000536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000538:	e009      	b.n	800054e <main+0x4e>
		{
//			sprintf((char*)MSG, "While Start %d\r\n", i);
//			HAL_UART_Transmit(&huart2, MSG, strlen((char*)MSG), 100);
		 htim2.Instance->CCR1 = i;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x78>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
		 HAL_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fb22 	bl	8000b8c <HAL_Delay>
		for(int i=5 ;i<150 ;i=i+2)
 8000548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800054a:	3302      	adds	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800054e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000550:	2b95      	cmp	r3, #149	; 0x95
 8000552:	ddf2      	ble.n	800053a <main+0x3a>
		}
		for(int i=150 ;i>0 ;i=i-2)
 8000554:	2396      	movs	r3, #150	; 0x96
 8000556:	66bb      	str	r3, [r7, #104]	; 0x68
 8000558:	e009      	b.n	800056e <main+0x6e>
		{
//			sprintf((char*)MSG, "While Start %d\r\n", i);
//			HAL_UART_Transmit(&huart2, MSG, strlen((char*)MSG), 100);
		 htim2.Instance->CCR1 = i;
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x78>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
		 HAL_Delay(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f000 fb12 	bl	8000b8c <HAL_Delay>
		for(int i=150 ;i>0 ;i=i-2)
 8000568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800056a:	3b02      	subs	r3, #2
 800056c:	66bb      	str	r3, [r7, #104]	; 0x68
 800056e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000570:	2b00      	cmp	r3, #0
 8000572:	dcf2      	bgt.n	800055a <main+0x5a>
		for(int i=5 ;i<150 ;i=i+2)
 8000574:	e7de      	b.n	8000534 <main+0x34>
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fe46 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <SystemClock_Config+0xd4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <SystemClock_Config+0xd4>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <SystemClock_Config+0xd8>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <SystemClock_Config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f4:	2348      	movs	r3, #72	; 0x48
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f8d3 	bl	80017b4 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000614:	f000 f904 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000624:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800062a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800062e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fd72 	bl	8001120 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000642:	f000 f8ed 	bl	8000820 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_TIM2_Init+0xe8>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_TIM2_Init+0xe8>)
 8000692:	22b3      	movs	r2, #179	; 0xb3
 8000694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_TIM2_Init+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_TIM2_Init+0xe8>)
 800069e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b0:	4823      	ldr	r0, [pc, #140]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006b2:	f001 fb1d 	bl	8001cf0 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006bc:	f000 f8b0 	bl	8000820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	4619      	mov	r1, r3
 80006cc:	481c      	ldr	r0, [pc, #112]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006ce:	f001 fe49 	bl	8002364 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006d8:	f000 f8a2 	bl	8000820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006de:	f001 fb56 	bl	8001d8e <HAL_TIM_PWM_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006e8:	f000 f89a 	bl	8000820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4619      	mov	r1, r3
 80006fa:	4811      	ldr	r0, [pc, #68]	; (8000740 <MX_TIM2_Init+0xe8>)
 80006fc:	f002 fa3c 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000706:	f000 f88b 	bl	8000820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2360      	movs	r3, #96	; 0x60
 800070c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM2_Init+0xe8>)
 8000722:	f001 fd5d 	bl	80021e0 <HAL_TIM_PWM_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800072c:	f000 f878 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM2_Init+0xe8>)
 8000732:	f000 f8c9 	bl	80008c8 <HAL_TIM_MspPostInit>

}
 8000736:	bf00      	nop
 8000738:	3738      	adds	r7, #56	; 0x38
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f002 fa8c 	bl	8002c98 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f84b 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000070 	.word	0x20000070
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_GPIO_Init+0x84>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1d      	ldr	r2, [pc, #116]	; (800081c <MX_GPIO_Init+0x84>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_GPIO_Init+0x84>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x84>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_GPIO_Init+0x84>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_GPIO_Init+0x84>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_GPIO_Init+0x84>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_GPIO_Init+0x84>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x84>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x84>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x84>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fa82 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800088c:	d115      	bne.n	80008ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f000 fa6b 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f000 fa84 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e8:	d11d      	bne.n	8000926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_TIM_MspPostInit+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_TIM_MspPostInit+0x68>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_TIM_MspPostInit+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000906:	2320      	movs	r3, #32
 8000908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <HAL_TIM_MspPostInit+0x6c>)
 8000922:	f000 fa69 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000992:	230c      	movs	r3, #12
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_UART_MspInit+0x8c>)
 80009ae:	f000 fa23 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f89a 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM2_IRQHandler+0x10>)
 8000a22:	f001 fad5 	bl	8001fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000028 	.word	0x20000028

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fbd3 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd3b 	bl	8000500 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	080032b4 	.word	0x080032b4
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	200000b8 	.word	0x200000b8

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fea6 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f967 	bl	8000dde <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f92f 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200000b4 	.word	0x200000b4

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e165      	b.n	80010e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8154 	bne.w	80010da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d130      	bne.n	8000eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 0201 	and.w	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d017      	beq.n	8000ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80ae 	beq.w	80010da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x304>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x308>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d025      	beq.n	8001012 <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d01f      	beq.n	800100e <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x310>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x314>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x318>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x20a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_GPIO_Init+0x31c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x320>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x202>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00c      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00a      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001002:	2304      	movs	r3, #4
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x304>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_Init+0x324>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_GPIO_Init+0x324>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_GPIO_Init+0x324>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <HAL_GPIO_Init+0x324>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_GPIO_Init+0x324>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_GPIO_Init+0x324>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f ae96 	bls.w	8000e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40021400 	.word	0x40021400
 8001118:	40021800 	.word	0x40021800
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0cc      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d90c      	bls.n	800115c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800117e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d044      	beq.n	8001240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e067      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 0203 	bic.w	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	4313      	orrs	r3, r2
 800120e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001210:	f7ff fcb0 	bl	8000b74 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	e00a      	b.n	800122e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001218:	f7ff fcac 	bl	8000b74 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	; 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e04f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 020c 	and.w	r2, r3, #12
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	429a      	cmp	r2, r3
 800123e:	d1eb      	bne.n	8001218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d20c      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f855 	bl	8001354 <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc10 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	0800328c 	.word	0x0800328c
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_RCC_GetHCLKFreq+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001308:	f7ff fff0 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0a9b      	lsrs	r3, r3, #10
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	0800329c 	.word	0x0800329c

0800132c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001330:	f7ff ffdc 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	0b5b      	lsrs	r3, r3, #13
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	0800329c 	.word	0x0800329c

08001354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001358:	b0ae      	sub	sp, #184	; 0xb8
 800135a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137a:	4bcb      	ldr	r3, [pc, #812]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b0c      	cmp	r3, #12
 8001384:	f200 8206 	bhi.w	8001794 <HAL_RCC_GetSysClockFreq+0x440>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <HAL_RCC_GetSysClockFreq+0x3c>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013c5 	.word	0x080013c5
 8001394:	08001795 	.word	0x08001795
 8001398:	08001795 	.word	0x08001795
 800139c:	08001795 	.word	0x08001795
 80013a0:	080013cd 	.word	0x080013cd
 80013a4:	08001795 	.word	0x08001795
 80013a8:	08001795 	.word	0x08001795
 80013ac:	08001795 	.word	0x08001795
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	08001795 	.word	0x08001795
 80013b8:	08001795 	.word	0x08001795
 80013bc:	08001795 	.word	0x08001795
 80013c0:	080015c5 	.word	0x080015c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4bb9      	ldr	r3, [pc, #740]	; (80016ac <HAL_RCC_GetSysClockFreq+0x358>)
 80013c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013ca:	e1e7      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4bb8      	ldr	r3, [pc, #736]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013d2:	e1e3      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d4:	4bb4      	ldr	r3, [pc, #720]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e0:	4bb1      	ldr	r3, [pc, #708]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d071      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ec:	4bae      	ldr	r3, [pc, #696]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80013fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800140e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001412:	4622      	mov	r2, r4
 8001414:	462b      	mov	r3, r5
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	0159      	lsls	r1, r3, #5
 8001420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001424:	0150      	lsls	r0, r2, #5
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4621      	mov	r1, r4
 800142c:	1a51      	subs	r1, r2, r1
 800142e:	6439      	str	r1, [r7, #64]	; 0x40
 8001430:	4629      	mov	r1, r5
 8001432:	eb63 0301 	sbc.w	r3, r3, r1
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001444:	4649      	mov	r1, r9
 8001446:	018b      	lsls	r3, r1, #6
 8001448:	4641      	mov	r1, r8
 800144a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800144e:	4641      	mov	r1, r8
 8001450:	018a      	lsls	r2, r1, #6
 8001452:	4641      	mov	r1, r8
 8001454:	1a51      	subs	r1, r2, r1
 8001456:	63b9      	str	r1, [r7, #56]	; 0x38
 8001458:	4649      	mov	r1, r9
 800145a:	eb63 0301 	sbc.w	r3, r3, r1
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800146c:	4649      	mov	r1, r9
 800146e:	00cb      	lsls	r3, r1, #3
 8001470:	4641      	mov	r1, r8
 8001472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001476:	4641      	mov	r1, r8
 8001478:	00ca      	lsls	r2, r1, #3
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	4603      	mov	r3, r0
 8001480:	4622      	mov	r2, r4
 8001482:	189b      	adds	r3, r3, r2
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
 8001486:	462b      	mov	r3, r5
 8001488:	460a      	mov	r2, r1
 800148a:	eb42 0303 	adc.w	r3, r2, r3
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800149c:	4629      	mov	r1, r5
 800149e:	024b      	lsls	r3, r1, #9
 80014a0:	4621      	mov	r1, r4
 80014a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014a6:	4621      	mov	r1, r4
 80014a8:	024a      	lsls	r2, r1, #9
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014c0:	f7fe fea0 	bl	8000204 <__aeabi_uldivmod>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4613      	mov	r3, r2
 80014ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ce:	e067      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80014ea:	2300      	movs	r3, #0
 80014ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014f2:	4622      	mov	r2, r4
 80014f4:	462b      	mov	r3, r5
 80014f6:	f04f 0000 	mov.w	r0, #0
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	0159      	lsls	r1, r3, #5
 8001500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001504:	0150      	lsls	r0, r2, #5
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4621      	mov	r1, r4
 800150c:	1a51      	subs	r1, r2, r1
 800150e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001510:	4629      	mov	r1, r5
 8001512:	eb63 0301 	sbc.w	r3, r3, r1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001524:	4649      	mov	r1, r9
 8001526:	018b      	lsls	r3, r1, #6
 8001528:	4641      	mov	r1, r8
 800152a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800152e:	4641      	mov	r1, r8
 8001530:	018a      	lsls	r2, r1, #6
 8001532:	4641      	mov	r1, r8
 8001534:	ebb2 0a01 	subs.w	sl, r2, r1
 8001538:	4649      	mov	r1, r9
 800153a:	eb63 0b01 	sbc.w	fp, r3, r1
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800154a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800154e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001552:	4692      	mov	sl, r2
 8001554:	469b      	mov	fp, r3
 8001556:	4623      	mov	r3, r4
 8001558:	eb1a 0303 	adds.w	r3, sl, r3
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	462b      	mov	r3, r5
 8001560:	eb4b 0303 	adc.w	r3, fp, r3
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001572:	4629      	mov	r1, r5
 8001574:	028b      	lsls	r3, r1, #10
 8001576:	4621      	mov	r1, r4
 8001578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800157c:	4621      	mov	r1, r4
 800157e:	028a      	lsls	r2, r1, #10
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001588:	2200      	movs	r2, #0
 800158a:	673b      	str	r3, [r7, #112]	; 0x70
 800158c:	677a      	str	r2, [r7, #116]	; 0x74
 800158e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001592:	f7fe fe37 	bl	8000204 <__aeabi_uldivmod>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4613      	mov	r3, r2
 800159c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a0:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015c2:	e0eb      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c4:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d06b      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	2200      	movs	r2, #0
 80015e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80015e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ee:	663b      	str	r3, [r7, #96]	; 0x60
 80015f0:	2300      	movs	r3, #0
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
 80015f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015f8:	4622      	mov	r2, r4
 80015fa:	462b      	mov	r3, r5
 80015fc:	f04f 0000 	mov.w	r0, #0
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	0159      	lsls	r1, r3, #5
 8001606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800160a:	0150      	lsls	r0, r2, #5
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4621      	mov	r1, r4
 8001612:	1a51      	subs	r1, r2, r1
 8001614:	61b9      	str	r1, [r7, #24]
 8001616:	4629      	mov	r1, r5
 8001618:	eb63 0301 	sbc.w	r3, r3, r1
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800162a:	4659      	mov	r1, fp
 800162c:	018b      	lsls	r3, r1, #6
 800162e:	4651      	mov	r1, sl
 8001630:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001634:	4651      	mov	r1, sl
 8001636:	018a      	lsls	r2, r1, #6
 8001638:	4651      	mov	r1, sl
 800163a:	ebb2 0801 	subs.w	r8, r2, r1
 800163e:	4659      	mov	r1, fp
 8001640:	eb63 0901 	sbc.w	r9, r3, r1
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001650:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001654:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001658:	4690      	mov	r8, r2
 800165a:	4699      	mov	r9, r3
 800165c:	4623      	mov	r3, r4
 800165e:	eb18 0303 	adds.w	r3, r8, r3
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	462b      	mov	r3, r5
 8001666:	eb49 0303 	adc.w	r3, r9, r3
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001678:	4629      	mov	r1, r5
 800167a:	024b      	lsls	r3, r1, #9
 800167c:	4621      	mov	r1, r4
 800167e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001682:	4621      	mov	r1, r4
 8001684:	024a      	lsls	r2, r1, #9
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800168e:	2200      	movs	r2, #0
 8001690:	65bb      	str	r3, [r7, #88]	; 0x58
 8001692:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001698:	f7fe fdb4 	bl	8000204 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4613      	mov	r3, r2
 80016a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016a6:	e065      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x420>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	00f42400 	.word	0x00f42400
 80016b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_GetSysClockFreq+0x458>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	2200      	movs	r2, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	4611      	mov	r1, r2
 80016c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
 80016c6:	2300      	movs	r3, #0
 80016c8:	657b      	str	r3, [r7, #84]	; 0x54
 80016ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016ce:	4642      	mov	r2, r8
 80016d0:	464b      	mov	r3, r9
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e0:	0150      	lsls	r0, r2, #5
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4641      	mov	r1, r8
 80016e8:	1a51      	subs	r1, r2, r1
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb63 0301 	sbc.w	r3, r3, r1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001700:	4659      	mov	r1, fp
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	4651      	mov	r1, sl
 8001706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170a:	4651      	mov	r1, sl
 800170c:	018a      	lsls	r2, r1, #6
 800170e:	4651      	mov	r1, sl
 8001710:	1a54      	subs	r4, r2, r1
 8001712:	4659      	mov	r1, fp
 8001714:	eb63 0501 	sbc.w	r5, r3, r1
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4643      	mov	r3, r8
 800172e:	18e3      	adds	r3, r4, r3
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	464b      	mov	r3, r9
 8001734:	eb45 0303 	adc.w	r3, r5, r3
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001746:	4629      	mov	r1, r5
 8001748:	028b      	lsls	r3, r1, #10
 800174a:	4621      	mov	r1, r4
 800174c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001750:	4621      	mov	r1, r4
 8001752:	028a      	lsls	r2, r1, #10
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175c:	2200      	movs	r2, #0
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001760:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001762:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001766:	f7fe fd4d 	bl	8000204 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4613      	mov	r3, r2
 8001770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_GetSysClockFreq+0x458>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0f1b      	lsrs	r3, r3, #28
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001792:	e003      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800179a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	37b8      	adds	r7, #184	; 0xb8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400

080017b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e28d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8083 	beq.w	80018da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d4:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d019      	beq.n	8001814 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e0:	4b91      	ldr	r3, [pc, #580]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ec:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f8:	d00c      	beq.n	8001814 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001806:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d05b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x124>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d157      	bne.n	80018d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e25a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d106      	bne.n	8001844 <HAL_RCC_OscConfig+0x90>
 8001836:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7b      	ldr	r2, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e01d      	b.n	8001880 <HAL_RCC_OscConfig+0xcc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0xb4>
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a72      	ldr	r2, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0xcc>
 8001868:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a6b      	ldr	r2, [pc, #428]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff f974 	bl	8000b74 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f970 	bl	8000b74 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e21f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b61      	ldr	r3, [pc, #388]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xdc>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f960 	bl	8000b74 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff f95c 	bl	8000b74 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e20b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x104>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06f      	beq.n	80019c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d017      	beq.n	8001922 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f2:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d11c      	bne.n	8001950 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x186>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e1d3      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4937      	ldr	r1, [pc, #220]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	e03a      	b.n	80019c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <HAL_RCC_OscConfig+0x278>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f909 	bl	8000b74 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f905 	bl	8000b74 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1b4      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4925      	ldr	r1, [pc, #148]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x278>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f8e8 	bl	8000b74 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff f8e4 	bl	8000b74 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e193      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d036      	beq.n	8001a40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d016      	beq.n	8001a08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff f8c8 	bl	8000b74 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff f8c4 	bl	8000b74 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e173      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80019fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x234>
 8001a06:	e01b      	b.n	8001a40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f8b1 	bl	8000b74 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	e00e      	b.n	8001a34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff f8ad 	bl	8000b74 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d907      	bls.n	8001a34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e15c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	42470000 	.word	0x42470000
 8001a30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ea      	bne.n	8001a16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8097 	beq.w	8001b7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a52:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a7e      	ldr	r2, [pc, #504]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <HAL_RCC_OscConfig+0x4b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0x4b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a75      	ldr	r2, [pc, #468]	; (8001c64 <HAL_RCC_OscConfig+0x4b0>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f86d 	bl	8000b74 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff f869 	bl	8000b74 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e118      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <HAL_RCC_OscConfig+0x4b0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x31e>
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x358>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x340>
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a60      	ldr	r2, [pc, #384]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a5d      	ldr	r2, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x358>
 8001af4:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a56      	ldr	r2, [pc, #344]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f82e 	bl	8000b74 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f82a 	bl	8000b74 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e0d7      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ee      	beq.n	8001b1c <HAL_RCC_OscConfig+0x368>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f818 	bl	8000b74 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f814 	bl	8000b74 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0c1      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ee      	bne.n	8001b48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ad 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d060      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d145      	bne.n	8001c26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x4b4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7fe ffe8 	bl	8000b74 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe ffe4 	bl	8000b74 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e093      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	019b      	lsls	r3, r3, #6
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	071b      	lsls	r3, r3, #28
 8001bf2:	491b      	ldr	r1, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x4b4>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7fe ffb9 	bl	8000b74 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe ffb5 	bl	8000b74 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e064      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x452>
 8001c24:	e05c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x4b4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7fe ffa2 	bl	8000b74 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe ff9e 	bl	8000b74 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e04d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x480>
 8001c52:	e045      	b.n	8001ce0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e040      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_RCC_OscConfig+0x538>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d030      	beq.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d129      	bne.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d122      	bne.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d119      	bne.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d10f      	bne.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e041      	b.n	8001d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fdb0 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 fc12 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e041      	b.n	8001e24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f839 	bl	8001e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f000 fbc3 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_TIM_PWM_Start+0x24>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e022      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d109      	bne.n	8001e7e <HAL_TIM_PWM_Start+0x3e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e015      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d109      	bne.n	8001e98 <HAL_TIM_PWM_Start+0x58>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e008      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07c      	b.n	8001fac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x82>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x92>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Start+0xa2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e003      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fe1a 	bl	8002b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_TIM_PWM_Start+0x174>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_PWM_Start+0xcc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_TIM_PWM_Start+0x178>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_TIM_PWM_Start+0xd0>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_TIM_PWM_Start+0xd2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_TIM_PWM_Start+0x174>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d01d      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_TIM_PWM_Start+0x17c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d018      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_TIM_PWM_Start+0x180>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_TIM_PWM_Start+0x184>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_TIM_PWM_Start+0x178>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_PWM_Start+0x188>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_TIM_PWM_Start+0x18c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d111      	bne.n	8001f9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d010      	beq.n	8001faa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	e007      	b.n	8001faa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40010400 	.word	0x40010400
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40001800 	.word	0x40001800

08001fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0202 	mvn.w	r2, #2
 8001ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa81 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa73 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fa84 	bl	800252e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b04      	cmp	r3, #4
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b04      	cmp	r3, #4
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0204 	mvn.w	r2, #4
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa57 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa49 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa5a 	bl	800252e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b08      	cmp	r3, #8
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0208 	mvn.w	r2, #8
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fa2d 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa1f 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fa30 	bl	800252e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0210 	mvn.w	r2, #16
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2208      	movs	r2, #8
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa03 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f9f5 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa06 	bl	800252e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0201 	mvn.w	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9cf 	bl	80024f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d107      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fd82 	bl	8002c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d107      	bne.n	80021ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9cb 	bl	8002542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0220 	mvn.w	r2, #32
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fd4c 	bl	8002c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0ae      	b.n	800235c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	f200 809f 	bhi.w	800234c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002249 	.word	0x08002249
 8002218:	0800234d 	.word	0x0800234d
 800221c:	0800234d 	.word	0x0800234d
 8002220:	0800234d 	.word	0x0800234d
 8002224:	08002289 	.word	0x08002289
 8002228:	0800234d 	.word	0x0800234d
 800222c:	0800234d 	.word	0x0800234d
 8002230:	0800234d 	.word	0x0800234d
 8002234:	080022cb 	.word	0x080022cb
 8002238:	0800234d 	.word	0x0800234d
 800223c:	0800234d 	.word	0x0800234d
 8002240:	0800234d 	.word	0x0800234d
 8002244:	0800230b 	.word	0x0800230b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fa22 	bl	8002698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0208 	orr.w	r2, r2, #8
 8002262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	619a      	str	r2, [r3, #24]
      break;
 8002286:	e064      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fa72 	bl	8002778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6999      	ldr	r1, [r3, #24]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]
      break;
 80022c8:	e043      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fac7 	bl	8002864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0208 	orr.w	r2, r2, #8
 80022e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0204 	bic.w	r2, r2, #4
 80022f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69d9      	ldr	r1, [r3, #28]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	61da      	str	r2, [r3, #28]
      break;
 8002308:	e023      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fb1b 	bl	800294c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	021a      	lsls	r2, r3, #8
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	61da      	str	r2, [r3, #28]
      break;
 800234a:	e002      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
      break;
 8002350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIM_ConfigClockSource+0x1c>
 800237c:	2302      	movs	r3, #2
 800237e:	e0b4      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x186>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d03e      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xd4>
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	f200 8087 	bhi.w	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	f000 8086 	beq.w	80024d6 <HAL_TIM_ConfigClockSource+0x172>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d87f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b70      	cmp	r3, #112	; 0x70
 80023d2:	d01a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xa6>
 80023d4:	2b70      	cmp	r3, #112	; 0x70
 80023d6:	d87b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d050      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x11a>
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d877      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b50      	cmp	r3, #80	; 0x50
 80023e2:	d03c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0xfa>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d873      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d058      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x13a>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d86f      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d064      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d86b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d060      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d867      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d05c      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d05a      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	e062      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f000 fb67 	bl	8002aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800242c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	609a      	str	r2, [r3, #8]
      break;
 8002436:	e04f      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f000 fb50 	bl	8002aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e03c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 fac4 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fb1d 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800247c:	e02c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 fae3 	bl	8002a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2160      	movs	r1, #96	; 0x60
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fb0d 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 800249c:	e01c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 faa4 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fafd 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e00c      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 faf4 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80024ce:	e003      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e000      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <TIM_Base_SetConfig+0x118>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <TIM_Base_SetConfig+0x120>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3a      	ldr	r2, [pc, #232]	; (800267c <TIM_Base_SetConfig+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2f      	ldr	r2, [pc, #188]	; (800266c <TIM_Base_SetConfig+0x114>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d027      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <TIM_Base_SetConfig+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d023      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <TIM_Base_SetConfig+0x120>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <TIM_Base_SetConfig+0x124>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d017      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <TIM_Base_SetConfig+0x128>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <TIM_Base_SetConfig+0x12c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00f      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <TIM_Base_SetConfig+0x130>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <TIM_Base_SetConfig+0x134>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <TIM_Base_SetConfig+0x138>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <TIM_Base_SetConfig+0x13c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <TIM_Base_SetConfig+0x114>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <TIM_Base_SetConfig+0x124>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800
 800268c:	40001800 	.word	0x40001800
 8002690:	40001c00 	.word	0x40001c00
 8002694:	40002000 	.word	0x40002000

08002698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <TIM_OC1_SetConfig+0xd8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_OC1_SetConfig+0x64>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <TIM_OC1_SetConfig+0xdc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10c      	bne.n	8002716 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0308 	bic.w	r3, r3, #8
 8002702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <TIM_OC1_SetConfig+0xd8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC1_SetConfig+0x8e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <TIM_OC1_SetConfig+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400

08002778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0320 	bic.w	r3, r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <TIM_OC2_SetConfig+0xe4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_OC2_SetConfig+0x68>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <TIM_OC2_SetConfig+0xe8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10d      	bne.n	80027fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <TIM_OC2_SetConfig+0xe4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_OC2_SetConfig+0x94>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <TIM_OC2_SetConfig+0xe8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d113      	bne.n	8002834 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800281a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010000 	.word	0x40010000
 8002860:	40010400 	.word	0x40010400

08002864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <TIM_OC3_SetConfig+0xe0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC3_SetConfig+0x66>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a20      	ldr	r2, [pc, #128]	; (8002948 <TIM_OC3_SetConfig+0xe4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <TIM_OC3_SetConfig+0xe0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC3_SetConfig+0x92>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <TIM_OC3_SetConfig+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d113      	bne.n	800291e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40010000 	.word	0x40010000
 8002948:	40010400 	.word	0x40010400

0800294c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	031b      	lsls	r3, r3, #12
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <TIM_OC4_SetConfig+0xa4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_OC4_SetConfig+0x68>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <TIM_OC4_SetConfig+0xa8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d109      	bne.n	80029c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010400 	.word	0x40010400

080029f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 030a 	bic.w	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0210 	bic.w	r2, r3, #16
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2201      	movs	r2, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e05a      	b.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d01d      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10c      	bne.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40010400 	.word	0x40010400
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40001800 	.word	0x40001800

08002c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e03f      	b.n	8002d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fe3a 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f829 	bl	8002d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b0c0      	sub	sp, #256	; 0x100
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	68d9      	ldr	r1, [r3, #12]
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	ea40 0301 	orr.w	r3, r0, r1
 8002d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d8c:	f021 010c 	bic.w	r1, r1, #12
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	6999      	ldr	r1, [r3, #24]
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	ea40 0301 	orr.w	r3, r0, r1
 8002dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b8f      	ldr	r3, [pc, #572]	; (8003000 <UART_SetConfig+0x2cc>)
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d005      	beq.n	8002dd4 <UART_SetConfig+0xa0>
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b8d      	ldr	r3, [pc, #564]	; (8003004 <UART_SetConfig+0x2d0>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d104      	bne.n	8002dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7fe faaa 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8002dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ddc:	e003      	b.n	8002de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7fe fa91 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8002de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df0:	f040 810c 	bne.w	800300c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e06:	4622      	mov	r2, r4
 8002e08:	462b      	mov	r3, r5
 8002e0a:	1891      	adds	r1, r2, r2
 8002e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e0e:	415b      	adcs	r3, r3
 8002e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e16:	4621      	mov	r1, r4
 8002e18:	eb12 0801 	adds.w	r8, r2, r1
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	eb43 0901 	adc.w	r9, r3, r1
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e36:	4690      	mov	r8, r2
 8002e38:	4699      	mov	r9, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	eb18 0303 	adds.w	r3, r8, r3
 8002e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e44:	462b      	mov	r3, r5
 8002e46:	eb49 0303 	adc.w	r3, r9, r3
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e62:	460b      	mov	r3, r1
 8002e64:	18db      	adds	r3, r3, r3
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
 8002e68:	4613      	mov	r3, r2
 8002e6a:	eb42 0303 	adc.w	r3, r2, r3
 8002e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e78:	f7fd f9c4 	bl	8000204 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4b61      	ldr	r3, [pc, #388]	; (8003008 <UART_SetConfig+0x2d4>)
 8002e82:	fba3 2302 	umull	r2, r3, r3, r2
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	011c      	lsls	r4, r3, #4
 8002e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eac:	4641      	mov	r1, r8
 8002eae:	eb12 0a01 	adds.w	sl, r2, r1
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ecc:	4692      	mov	sl, r2
 8002ece:	469b      	mov	fp, r3
 8002ed0:	4643      	mov	r3, r8
 8002ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eda:	464b      	mov	r3, r9
 8002edc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	18db      	adds	r3, r3, r3
 8002efc:	643b      	str	r3, [r7, #64]	; 0x40
 8002efe:	4613      	mov	r3, r2
 8002f00:	eb42 0303 	adc.w	r3, r2, r3
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
 8002f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f0e:	f7fd f979 	bl	8000204 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <UART_SetConfig+0x2d4>)
 8002f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2264      	movs	r2, #100	; 0x64
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	1acb      	subs	r3, r1, r3
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <UART_SetConfig+0x2d4>)
 8002f30:	fba3 2302 	umull	r2, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f3c:	441c      	add	r4, r3
 8002f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	1891      	adds	r1, r2, r2
 8002f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f58:	415b      	adcs	r3, r3
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f60:	4641      	mov	r1, r8
 8002f62:	1851      	adds	r1, r2, r1
 8002f64:	6339      	str	r1, [r7, #48]	; 0x30
 8002f66:	4649      	mov	r1, r9
 8002f68:	414b      	adcs	r3, r1
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f78:	4659      	mov	r1, fp
 8002f7a:	00cb      	lsls	r3, r1, #3
 8002f7c:	4651      	mov	r1, sl
 8002f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f82:	4651      	mov	r1, sl
 8002f84:	00ca      	lsls	r2, r1, #3
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	189b      	adds	r3, r3, r2
 8002f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f94:	464b      	mov	r3, r9
 8002f96:	460a      	mov	r2, r1
 8002f98:	eb42 0303 	adc.w	r3, r2, r3
 8002f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	18db      	adds	r3, r3, r3
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fba:	4613      	mov	r3, r2
 8002fbc:	eb42 0303 	adc.w	r3, r2, r3
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fca:	f7fd f91b 	bl	8000204 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <UART_SetConfig+0x2d4>)
 8002fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	2164      	movs	r1, #100	; 0x64
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	3332      	adds	r3, #50	; 0x32
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <UART_SetConfig+0x2d4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	f003 0207 	and.w	r2, r3, #7
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4422      	add	r2, r4
 8002ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ffc:	e106      	b.n	800320c <UART_SetConfig+0x4d8>
 8002ffe:	bf00      	nop
 8003000:	40011000 	.word	0x40011000
 8003004:	40011400 	.word	0x40011400
 8003008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800301a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800301e:	4642      	mov	r2, r8
 8003020:	464b      	mov	r3, r9
 8003022:	1891      	adds	r1, r2, r2
 8003024:	6239      	str	r1, [r7, #32]
 8003026:	415b      	adcs	r3, r3
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800302e:	4641      	mov	r1, r8
 8003030:	1854      	adds	r4, r2, r1
 8003032:	4649      	mov	r1, r9
 8003034:	eb43 0501 	adc.w	r5, r3, r1
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	00eb      	lsls	r3, r5, #3
 8003042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003046:	00e2      	lsls	r2, r4, #3
 8003048:	4614      	mov	r4, r2
 800304a:	461d      	mov	r5, r3
 800304c:	4643      	mov	r3, r8
 800304e:	18e3      	adds	r3, r4, r3
 8003050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003054:	464b      	mov	r3, r9
 8003056:	eb45 0303 	adc.w	r3, r5, r3
 800305a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800306a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800307a:	4629      	mov	r1, r5
 800307c:	008b      	lsls	r3, r1, #2
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003084:	4621      	mov	r1, r4
 8003086:	008a      	lsls	r2, r1, #2
 8003088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800308c:	f7fd f8ba 	bl	8000204 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4b60      	ldr	r3, [pc, #384]	; (8003218 <UART_SetConfig+0x4e4>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	011c      	lsls	r4, r3, #4
 800309e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	1891      	adds	r1, r2, r2
 80030b6:	61b9      	str	r1, [r7, #24]
 80030b8:	415b      	adcs	r3, r3
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c0:	4641      	mov	r1, r8
 80030c2:	1851      	adds	r1, r2, r1
 80030c4:	6139      	str	r1, [r7, #16]
 80030c6:	4649      	mov	r1, r9
 80030c8:	414b      	adcs	r3, r1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d8:	4659      	mov	r1, fp
 80030da:	00cb      	lsls	r3, r1, #3
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030e2:	4651      	mov	r1, sl
 80030e4:	00ca      	lsls	r2, r1, #3
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	4642      	mov	r2, r8
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f4:	464b      	mov	r3, r9
 80030f6:	460a      	mov	r2, r1
 80030f8:	eb42 0303 	adc.w	r3, r2, r3
 80030fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	67bb      	str	r3, [r7, #120]	; 0x78
 800310a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003118:	4649      	mov	r1, r9
 800311a:	008b      	lsls	r3, r1, #2
 800311c:	4641      	mov	r1, r8
 800311e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003122:	4641      	mov	r1, r8
 8003124:	008a      	lsls	r2, r1, #2
 8003126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800312a:	f7fd f86b 	bl	8000204 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4611      	mov	r1, r2
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <UART_SetConfig+0x4e4>)
 8003136:	fba3 2301 	umull	r2, r3, r3, r1
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2264      	movs	r2, #100	; 0x64
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	1acb      	subs	r3, r1, r3
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	3332      	adds	r3, #50	; 0x32
 8003148:	4a33      	ldr	r2, [pc, #204]	; (8003218 <UART_SetConfig+0x4e4>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003154:	441c      	add	r4, r3
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315a:	2200      	movs	r2, #0
 800315c:	673b      	str	r3, [r7, #112]	; 0x70
 800315e:	677a      	str	r2, [r7, #116]	; 0x74
 8003160:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	1891      	adds	r1, r2, r2
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	415b      	adcs	r3, r3
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003174:	4641      	mov	r1, r8
 8003176:	1851      	adds	r1, r2, r1
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	4649      	mov	r1, r9
 800317c:	414b      	adcs	r3, r1
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800318c:	4659      	mov	r1, fp
 800318e:	00cb      	lsls	r3, r1, #3
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003196:	4651      	mov	r1, sl
 8003198:	00ca      	lsls	r2, r1, #3
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	4642      	mov	r2, r8
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a6:	464b      	mov	r3, r9
 80031a8:	460a      	mov	r2, r1
 80031aa:	eb42 0303 	adc.w	r3, r2, r3
 80031ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ba:	667a      	str	r2, [r7, #100]	; 0x64
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031c8:	4649      	mov	r1, r9
 80031ca:	008b      	lsls	r3, r1, #2
 80031cc:	4641      	mov	r1, r8
 80031ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d2:	4641      	mov	r1, r8
 80031d4:	008a      	lsls	r2, r1, #2
 80031d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031da:	f7fd f813 	bl	8000204 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <UART_SetConfig+0x4e4>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <UART_SetConfig+0x4e4>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 020f 	and.w	r2, r3, #15
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4422      	add	r2, r4
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003212:	46bd      	mov	sp, r7
 8003214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003218:	51eb851f 	.word	0x51eb851f

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4d0d      	ldr	r5, [pc, #52]	; (8003264 <__libc_init_array+0x38>)
 8003230:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <__libc_init_array+0x3c>)
 8003232:	1b64      	subs	r4, r4, r5
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	2600      	movs	r6, #0
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	4d0b      	ldr	r5, [pc, #44]	; (800326c <__libc_init_array+0x40>)
 800323e:	4c0c      	ldr	r4, [pc, #48]	; (8003270 <__libc_init_array+0x44>)
 8003240:	f000 f818 	bl	8003274 <_init>
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	2600      	movs	r6, #0
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f855 3b04 	ldr.w	r3, [r5], #4
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f855 3b04 	ldr.w	r3, [r5], #4
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	080032ac 	.word	0x080032ac
 8003268:	080032ac 	.word	0x080032ac
 800326c:	080032ac 	.word	0x080032ac
 8003270:	080032b0 	.word	0x080032b0

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
